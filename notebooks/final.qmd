---
title: "database"
format:
  html:
    code-fold: true
jupyter: python3
---

```{python}
from sympy import *
```

# Problem 1
```{python}
a,b,c = 1,0,2
ans_1 = 3*a+2*b-2*c
ans_2 = -4*a-3*b+2*c
ans_3 = -c

Matrix([[0,1,1,ans_1],[1,-1,0,ans_2],[1,0,2,ans_3]]).rref()[0]
```

```{python}
A = Matrix([[-1,0,0],[0,1,0],[0,0,-1]])
A.eigenvects()[1][2][0]
B = Matrix([[-2,0,0,0],[0,0,0,0],[0,0,-2,0]])
B.echelon_form()
```

# Problem 2
```{python}
A = Matrix([[0,-2,-3],[-1,1,-1],[2,2,5]])
A.eigenvals()
A.eigenvects()
```

```{python}
A = Matrix([[-3,-2,-3],[-1,-2,-1],[2,2,2]])
A.echelon_form()
```

```{python}
A = Matrix([[-2,-2,-3],[-1,-1,-1],[2,2,3]])
A.echelon_form()
```

```{python}
A = Matrix([[-1,-2,-3],[-1,0,-1],[2,2,4]])
A.echelon_form()
```


```{python}
A = Matrix([[0,-2,-3],[-1,1,-1],[2,2,5]])
Q = Matrix([[-1,-1,-1],[-1,1,0],[1,0,1]])
ans = Q.inv()*A*Q
P,D = A.diagonalize()
Q.inv()
```

# Problem 3

```{python}
A = Matrix([[0,0,1,0],[0,0,0,1],[1,0,0,0],[0,1,0,0]])
A.eigenvects()
```

```{python}
A = Matrix([[0,0,1,0],[0,0,0,1],[1,0,0,0],[0,1,0,0]])
Q = Matrix([[-1,0,1,0],[0,-1,0,1],[1,0,1,0],[0,1,0,1]])
ans = Q.inv()*A*Q
P,D = A.diagonalize()
Q.inv()
```


# Problem 6
```{python}
A = Matrix([[3,1,1],[2,4,2], [-1,-1,1]])
A.eigenvects()
```

```{python}
A = Matrix([[1,1,1],[2,2,2], [-1,-1,-1]])
A.echelon_form()
```

```{python}
A = Matrix([[-1,1,1],[2,0,2], [-1,-1,-3]])
A.echelon_form()
```

```{python}
A = Matrix([[3,1,1],[2,4,2], [-1,-1,1]])
Q = Matrix([[-1,-1,-1],[1,0,-2],[0,1,1]])
ans = Q.inv()*A*Q
P,D = A.diagonalize()
D
```

# Problem 7
```{python}
A = Matrix([[1,4],[2,3]])
A.eigenvects()
```

```{python}
A = Matrix([[1,4],[2,3]])
P,D = A.diagonalize()
D
```
